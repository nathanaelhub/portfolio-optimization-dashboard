apiVersion: apps/v1
kind: Deployment
metadata:
  name: portfolio-backend
  namespace: portfolio-system
  labels:
    app: portfolio-backend
    tier: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: portfolio-backend
  template:
    metadata:
      labels:
        app: portfolio-backend
        tier: backend
        version: v1
    spec:
      containers:
      - name: backend
        image: portfolio-optimization/backend:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-url
        - name: ENVIRONMENT
          value: "production"
        - name: PORT
          value: "8000"
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: monitoring-secret
              key: sentry-dsn
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: auth-secret
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: encryption-secret
              key: encryption-key
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: temp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: backend-config
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      - name: temp-volume
        emptyDir: {}
      imagePullSecrets:
      - name: registry-secret
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - portfolio-backend
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: portfolio-backend-service
  namespace: portfolio-system
  labels:
    app: portfolio-backend
spec:
  selector:
    app: portfolio-backend
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: portfolio-backend-hpa
  namespace: portfolio-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: portfolio-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: portfolio-system
data:
  app.conf: |
    [server]
    host = 0.0.0.0
    port = 8000
    workers = 4
    
    [database]
    pool_size = 20
    max_overflow = 30
    pool_timeout = 30
    
    [redis]
    max_connections = 100
    socket_timeout = 30
    
    [logging]
    level = INFO
    format = json
    
    [optimization]
    max_concurrent_jobs = 10
    timeout_seconds = 300
    
    [security]
    rate_limit_requests = 100
    rate_limit_window = 60

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: portfolio-system
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: portfolio-backend-netpol
  namespace: portfolio-system
spec:
  podSelector:
    matchLabels:
      app: portfolio-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: portfolio-frontend
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: portfolio-backend-pdb
  namespace: portfolio-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: portfolio-backend

---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: portfolio-system
type: Opaque
data:
  database-url: cG9zdGdyZXNxbCtwYXN5Y29wZzovL3BvcnRmb2xpb191c2VyOnBhc3N3b3JkQHBvc3RncmVzOjU0MzIvcG9ydGZvbGlvX2Ri  # base64 encoded

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: portfolio-system
type: Opaque
data:
  redis-url: cmVkaXM6Ly9yZWRpczozNzk=  # base64 encoded

---
apiVersion: v1
kind: Secret
metadata:
  name: auth-secret
  namespace: portfolio-system
type: Opaque
data:
  jwt-secret: c3VwZXJfc2VjcmV0X2p3dF9rZXk=  # base64 encoded

---
apiVersion: v1
kind: Secret
metadata:
  name: encryption-secret
  namespace: portfolio-system
type: Opaque
data:
  encryption-key: ZW5jcnlwdGlvbl9rZXlfMzJfYnl0ZXNfbG9uZw==  # base64 encoded

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secret
  namespace: portfolio-system
type: Opaque
data:
  sentry-dsn: aHR0cHM6Ly9leGFtcGxlQHNlbnRyeS5pbw==  # base64 encoded